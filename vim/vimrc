set encoding=UTF-8
set nocompatible

syntax on
filetype plugin indent on

let mapleader="\<Space>"
let localmapleader="\\"

" Math is hard, use line numbers
set number relativenumber

" Let's not go past this
set colorcolumn=80

set showtabline=1

" I like to undo
set undofile
set undodir=~/.cache/vim/undo

augroup vimrc
  autocmd!
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

runtime macros/matchit.vim

call plugpac#begin()

Pack 'k-takata/minpac', {'type': 'opt'}

Pack 'christoomey/vim-tmux-navigator'
Pack 'junegunn/fzf', { 'do': {-> system('./install --bin') } }
Pack 'junegunn/fzf.vim'
Pack 'tpope/vim-unimpaired'
Pack 'tpope/vim-endwise'
Pack 'tpope/vim-apathy'
Pack 'tpope/vim-bundler'
Pack 'tpope/vim-commentary'
Pack 'tpope/vim-dispatch'
Pack 'tpope/vim-eunuch'
Pack 'tpope/vim-flagship'
Pack 'tpope/vim-fugitive'
Pack 'tpope/vim-git'
Pack 'tpope/vim-projectionist'
Pack 'tpope/vim-rake'
Pack 'tpope/vim-ragtag'
Pack 'tpope/vim-rails'
Pack 'tpope/vim-repeat'
Pack 'tpope/vim-sensible'
Pack 'tpope/vim-sleuth'
Pack 'tpope/vim-surround'
Pack 'tpope/vim-vinegar'
Pack 'tweekmonster/startuptime.vim'
Pack 'vim-pandoc/vim-pandoc'
Pack 'kana/vim-textobj-user', { 'for': 'ruby' }
Pack 'nelstrom/vim-textobj-rubyblock', { 'for': 'ruby' }
Pack 'vim-ruby/vim-ruby'

" Pack 'Shougo/deoplete.nvim'
" Pack 'SirVer/ultisnips'
" Pack 'dense-analysis/ale'
" Pack 'honza/vim-snippets'
" Pack 'machakann/vim-highlightedyank'
" Pack 'roxma/nvim-yarp'
" Pack 'roxma/vim-hug-neovim-rpc'
" Pack 'vim-test/vim-test'
" Pack 'AndrewRadev/sideways.vim', { 'type': 'opt' }
" Pack 'AndrewRadev/splitjoin.vim', { 'type': 'opt' }
" Pack 'AndrewRadev/tagalong.vim', { 'type': 'opt' }
" Pack 'JamshedVesuna/vim-markdown-preview', { 'type': 'opt' }
" Pack 'airblade/vim-gitgutter', { 'type': 'opt' }
" Pack 'bkad/CamelCaseMotion', { 'type': 'opt' }
" Pack 'chriskempson/base16-vim', { 'type': 'opt' }
" Pack 'dpelle/vim-LanguageTool', { 'type': 'opt' }
" Pack 'ecomba/vim-ruby-refactoring', { 'for': 'ruby', 'type': 'opt' }
" Pack 'godlygeek/csapprox', { 'type': 'opt' }
" Pack 'godlygeek/tabular', { 'type': 'opt' }
" Pack 'jiangmiao/auto-pairs', { 'type': 'opt' }
" Pack 'jpalardy/vim-slime', { 'type': 'opt' }
" Pack 'junegunn/goyo.vim', { 'type': 'opt' }
" Pack 'kana/vim-textobj-datetime', { 'type': 'opt' }
" Pack 'kana/vim-textobj-entire', { 'type': 'opt' }
" Pack 'kana/vim-textobj-lastpat', { 'type': 'opt' }
" Pack 'kien/rainbow_parentheses.vim', { 'type': 'opt' }
" Pack 'ludovicchabant/vim-gutentags', { 'type': 'opt' }
" Pack 'mattn/emmet-vim', { 'type': 'opt' }
" Pack 'mbbill/undotree', { 'type': 'opt' }
" Pack 'mhinz/vim-grepper', { 'type': 'opt' }
" Pack 'morhetz/gruvbox', { 'type': 'opt' }
" Pack 'othree/html5.vim', { 'type': 'opt' }
" Pack 'roxma/vim-tmux-clipboard', { 'type': 'opt' }
" Pack 'sheerun/vim-polyglot', { 'type': 'opt' }
" Pack 'sotte/presenting.vim', { 'type': 'opt' }
" Pack 'sunaku/vim-ruby-minitest', { 'type': 'opt' }
" Pack 'thoughtbot/vim-rspec', { 'type': 'opt' }
" Pack 'tmux-plugins/vim-tmux-focus-events', { 'type': 'opt' }
" Pack 'tpope/vim-abolish', { 'type': 'opt' }
" Pack 'tpope/vim-characterize', { 'type': 'opt' }
" Pack 'tpope/vim-cucumber', { 'type': 'opt' }
" Pack 'tpope/vim-dadbod', { 'type': 'opt' }
" Pack 'tpope/vim-dotenv', { 'type': 'opt' }
" Pack 'tpope/vim-fireplace', { 'for': 'clojure', 'type': 'opt' }
" Pack 'tpope/vim-jdaddy', { 'type': 'opt' }
" Pack 'tpope/vim-markdown', { 'type': 'opt' }
" Pack 'tpope/vim-obsession', { 'type': 'opt' }
" Pack 'tpope/vim-rhubarb', { 'type': 'opt' }
" Pack 'tpope/vim-rsi', { 'type': 'opt' }
" Pack 'tpope/vim-salve', { 'for': 'clojure', 'type': 'opt' }
" Pack 'tpope/vim-scriptease', { 'type': 'opt' }
" Pack 'tpope/vim-speeddating', { 'type': 'opt' }
" Pack 'tpope/vim-tbone', { 'type': 'opt' }
" Pack 'tpope/vim-vividchalk', { 'type': 'opt' }
" Pack 'unblevable/quick-scope', { 'type': 'opt' }
" Pack 'wincent/loupe', { 'type': 'opt' }
" Pack 'wincent/scalpel', { 'type': 'opt' }
" Pack 'wincent/terminus', { 'type': 'opt' }

call plugpac#end()

" For some reason, vim-rails likes to jump to helpers instead of model tests
let g:rails_projections = {
  \ "test/models/*_test.rb": {"command": "modeltest"}
  \ }

" This speeds up vim-ruby quite a lot
" Set the ruby path so that it doesn't have to find it
let g:ruby_path = '~/.asdf/shims/ruby'

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_load_gemfile = 1

let ruby_operators = 1
let ruby_pseudo_operators = 1
let ruby_space_errors = 1
let ruby_line_continuation_error = 1
let ruby_global_variable_error = 1
let ruby_spellcheck_strings = 1

" if you are gonna visual, might as well...
vmap < <gv
vmap > >gv

" make Y consitent with D and C (yank til end)
map Y y$

" Be able to format the whole buffer
nmap <Leader>= migg=G'i

" Use FZF like I used CTRL-P
nnoremap <C-p> :Files<CR>

if executable("rg")
	set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
	set grepformat=%f:%l:%c:%m
endif

" Use rg as a way to find other things
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!{.git,node_modules,coverage,tmp}/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

function! s:overrideColors() abort
  highlight SignColumn ctermbg=NONE
  highlight Todo ctermbg=NONE ctermfg=yellow
  highlight LineNr ctermbg=NONE ctermfg=yellow
  highlight Normal ctermbg=NONE
  highlight NonText ctermbg=NONE
  highlight StatusLine ctermbg=NONE ctermfg=white
  highlight StatusLineNC ctermbg=NONE ctermfg=gray
  highlight VertSplit cterm=NONE ctermbg=NONE ctermfg=gray
  highlight Folded ctermbg=NONE
  highlight TabLineFill cterm=NONE ctermbg=NONE
endfunction
call s:overrideColors()

augroup custom_colors
  au!
  autocmd ColorScheme * call s:overrideColors()
augroup END

" Very magic mode
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap \>s/ \>smagic/
nnoremap :g/ :g/\v
nnoremap :g// :g//

" dispatch - Lazy man's vim-test
nnoremap <Leader>t :exe ":FocusDispatch rails test %:<C-R>=line('.')<CR>" <BAR> Dispatch<CR>
nnoremap <Leader>T :exe ":FocusDispatch rails test %" <BAR> Dispatch<CR>
nnoremap <Leader>a :exe ":FocusDispatch! rails test" <BAR> Dispatch<CR>
nnoremap <Leader>l :Dispatch<CR>
