" vim: nowrap fdm=marker

let mapleader="\<Space>"

" {{{1 Settings
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

set autoindent
set shiftwidth=2              " number of spaces when shift indenting
set tabstop=2                 " number of visual spaces per tab
set softtabstop=2             " number of spaces in tab when editing
set expandtab                 " tab to spaces
set number                    " show line numbers
set relativenumber            " show line numbers relative to current line
set cursorline                " highlight current line
set showmatch                 " highlight matching [{()}]
set incsearch                 " search as characters are entered
set hlsearch                  " higlight matches
" Ignore a lot of stuff I don't want to see in my file base
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*
set noswapfile                " No need to create swap files
set colorcolumn=81            " Notify me if I go over 80 characters
set hidden
" }}}

" {{{1 Mappings
" I rarely use Q to its fullest so let's use it to redo @q macros
nnoremap Q @q
" Format the whole buffer
nnoremap <Leader>= migg=G`i
" Use yank like D, C, etc.
nnoremap Y y$
" Easy grep
nnoremap <Leader>g :grep!<Space>

" Get out of terminal easily with ESC
if exists(':tnoremap')
  tnoremap <Esc> <C-\><C-n>
endif

" Do a search or replace with the current word
nnoremap <Leader>s :s/\(<C-r>=expand("<cword>")<CR>\)/
" }}}

" {{{1 FZF config
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }

let $FZF_DEFAULT_OPTS='--reverse --preview "bat --style=numbers --color=always --line-range :500 {}"'
nnoremap <C-p> :Files<CR>
" }}}

" {{{1 ruby-test config
" Use vim-dispatch to do vim-test type stuff
function s:map_tests() abort
  nmap <buffer> <silent> <leader>t :w<bar>exec "FocusDispatch rails test %:<C-R>=line('.')<CR>" <bar> Dispatch<CR>
  nmap <buffer> <silent> <leader>T :w<bar>exec "FocusDispatch rails test %" <bar> Dispatch<CR>
  nmap <buffer> <silent> <leader>a :w<bar>exec "FocusDispatch rails test" <bar> Dispatch<CR>
  nmap <buffer> <silent> <leader>l :w<bar>Dispatch<CR>
endfunction

" Do this only for ruby files
augroup rubytests
  autocmd!
  autocmd FileType ruby call s:map_tests()
augroup END
" }}}

" {{{1 vim-rails config
" This lets me create a test file properly
let g:rails_projections = {
      \ "test/models/*_test.rb": {"command": "modeltest",
      \   "template":
      \     ["require \"test_helper\"",
      \      "",
      \      "class {camelcase|capitalize|colons}Test < ActiveSupport::TestCase",
      \      "end"]
      \   }
      \ }
" }}}

" {{{1 rg/grep
if executable('rg')
  set grepprg=rg\ -H\ --no-heading\ --vimgrep\ --smart-case
endif
" }}}

" {{{1 ale
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]W <Plug>(ale_last)
nmap <silent> ]w <Plug>(ale_next)

" Always show sign column
let g:ale_sign_column_always = 1

" Set to show which linter says there is an issue
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_error = '✖'
let g:ale_sign_info = 'ℹ'
let g:ale_sign_warning = '⚠'

let g:ale_set_balloons = 1
let g:ale_hover_to_preview = 1
let g:ale_hover_cursor = 1

set omnifunc=ale#completion#OmniFunc
let g:ale_hover_to_floating_preview = 1

let g:ale_linters = {
      \ "ruby": [ "brakeman", "rails_best_practices", "reek", "solargraph" ]
      \ }
let g:ale_fixers = {
      \ "*": [ "remove_trailing_lines" ],
      \ "ruby": [ "rubocop" ]
      \ }
" }}}

" {{{1 colorscheme
let g:transparency=1
function! s:makeTransparentBackground() abort
  if exists("g:transparency")
    highlight Normal guibg=NONE ctermbg=NONE
  endif
endfunction

" Only if I have set it to be transparent
augroup dblanken_transparency
  autocmd!
  autocmd ColorScheme * call s:makeTransparentBackground()
augroup END

packadd! dracula
colorscheme dracula
" }}}

