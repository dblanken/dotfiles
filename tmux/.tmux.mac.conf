set-option -g default-command "reattach-to-user-namespace -l zsh"

# Prefix Ctrl-C takes what's in the buffer and sends it to system clipboard
# via pbcopy
bind C-c run "tmux save-buffer - | pbcopy"

# y in copy mode takes selection and sends it to system clipboard via pbcopy
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Prefix Ctrl-v fills tmux buffer from system clipboard via pbpaste, then
# pastes from buffer into tmux window
bind C-v run "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"

unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# # Setup 'v' to begin selection as in Vim
# bind-key -T vi-copy v begin-selection
# bind-key -T vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# # Update default binding of `Enter` to also use copy-pipe
# unbind -T vi-copy Enter
# bind-key -T vi-copy Enter copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# PBcopy for Mac
# bind C-c run "tmux save-buffer - | pbcopy"

# # bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# bind C-v run "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"

# # Prefix Ctrl-C takes what's in the buffer and sends it to system clipboard
# # via pbcopy
# bind C-c run "tmux save-buffer - | pbcopy"

# # y in copy mode takes selection and sends it to system clipboard via pbcopy
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"

# # Prefix Ctrl-v fills tmux buffer from system clipboard via pbpaste, then
# # pastes from buffer into tmux window
# bind C-v run "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"
