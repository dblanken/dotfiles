run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
                           sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'

set -g default-terminal "tmux-256color"

# Use C-Space instead of C-b
unbind C-b
unbind C-Space
set -g prefix C-Space
bind C-Space send-prefix

# Use 1 instead of 0 based
set -g base-index 1
set -g pane-base-index 1

# Open new/split panes with the path of the current pane.
unbind c
bind c new-window -c '#{pane_current_path}'
unbind %
bind % split-window -h -c '#{pane_current_path}'
unbind |
bind | split-window -h -c '#{pane_current_path}'
unbind -
bind - split-window -v -c '#{pane_current_path}'

# Move between panes with Prefix h,j,k,l
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Automatically renumber window numbers on closing a pane (tmux >= 1.7)
set -g renumber-windows on

# mouse support
set -g mouse on

# enable vi keys
setw -g mode-keys vi

# escape turns on copy mode
bind Escape copy-mode

# v in copy mode starts making selection
bind-key -T copy-mode-vi v send -X begin-selection
# y to copy the selection
bind-key -T copy-mode-vi y send -X copy-selection

# make Prefix p paste the buffer
unbind p
bind p paste-buffer

bind C-c run "tmux save-buffer - | xclip -sel clip -i"

bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"
bind C-v run "tmux set-buffer \"$(xclip -sel clip -o)\"; tmux paste-buffer"

# shortcut for synchronize-panes toggle
bind C-s set-window-option synchronize-panes

# split pane and retain the currrent directory of existing pane
bind _ split-window -v -c "#{pane_current_path}"
if-shell -b '[ "$(echo "$TMUX_VERSION < 3.0" | bc)" = 1 ]' \
    'bind \ split-window -h -c "#{pane_current_path}"'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 3.0" | bc)" = 1 ]' \
    'bind \\ split-window -h -c "#{pane_current_path}"'

# Log output to a text file on demand
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

# POSIX clears screen using C-l, so allow
# Prefix C-l to do this
bind C-l send-keys 'C-l'

# Stay in copy mode on drag end.
# (Would use `bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X
# stop-selection` but it is a bit glitchy.)
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Restore pre-2.1 behavior of scrolling with the scrollwheel in Vim, less, copy
# mode etc, otherwise entering copy mode if not already in it.
#
#   if in copy mode (pane_in_mode) || using the mouse already (mouse_any_flag)
#     pass through mouse events to current pane (send -Mt=)
#   elsif in alternate screen mode
#     send `Up` key
#   else
#     enter copy mode (-e exits if we scroll to the bottom)
#   end
#
bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# soften status bar color from harsh green to light gray
set -g status-style bg='#666666',fg='#aaaaaa',italics,bold

# remove administrative debris (session name, hostname, time) in status bar
set -g status-left '#[fg=yellow,bold,italics]#S ยง '
set -g status-right ''

# Status bar.
set-option -g status-style bg='#373b41',fg='white,bold,italics'
set-option -g status-left-length 40
set-option -g status-interval 1 # Default is 15.

bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# Recommended by neovim's checkhealth
set-option -sa terminal-overrides ',xterm*:RGB'

# Dynamically update iTerm tab and window titles.
set-option -g set-titles on
set-option -g set-titles-string "#S > #T"
set-option -g allow-rename on

# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
set-option -g focus-events on

# But don't change tmux's own window titles.
# set-option -w -g automatic-rename off
